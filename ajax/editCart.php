<?php/** * Created by PhpStorm. * User: nicol * Date: 2019/09/21 * Time: 09:48 *//** Continue session */session_start();/** Include products */require_once __DIR__ . '/../products_include.php';require_once __DIR__ . '/../Classes/Cart/Cart.php';/** Wrap in try catch for better error handling */try{    /** Validate Request Method is Valid */    if($_SERVER['REQUEST_METHOD'] == 'POST'){        /** Validate Action type */        if(isset($_POST['action']) && ($_POST['action'] == 'addItem' || $_POST['action'] == 'clearCart')){            if($_POST['action'] == 'addItem'){                /** Create new cart session if it does not exist */                if(!isset($_SESSION['cart'])){                    $_SESSION['cart'] = [];                    $_SESSION['cart_total'] = 0;                }                /** Get item details te added */                $item_to_add = [];                foreach($products as $product){                    if($_POST['item'] == $product['name']){                        $item_to_add = $product;                    }                }                /** Instantiate Cart Object */                $cart = new Classes\Cart\Cart($_SESSION['cart']);                /** Add Item to Cart */                $cart->addItem($item_to_add['name'], $item_to_add['price'], 1);                /** Update the session */                $_SESSION['cart'] = $cart->getItemList();                $_SESSION['cart_total'] = $cart->getTotal();                echo json_encode(array('message_type' => 'success', 'message_content' => 'Cart Updated', 'payload' => array('cart' => $_SESSION['cart'], 'total' => $_SESSION['cart_total'])));            }elseif($_POST['action'] == 'clearCart'){                /** Unset session variables */                if(isset($_SESSION['cart'])){unset($_SESSION['cart']);}                if($_SESSION['cart_total']){unset($_SESSION['cart_total']);}                /** Return Success Message */                echo json_encode(array('message_type' => 'success', 'message_content' => 'Cart Cleared'));            }        }else{            throw new Exception('Invalid Action Type');        }    }else{        throw new Exception('Invalid Request Type');    }}catch(Exception $e){    /** Set header to 500 for custom error */    header($_SERVER['SERVER_PROTOCOL'] . ' 500 Internal Server Error', true, 500);    /** Return error if requet method is invalid */    echo json_encode(array('message_type' => 'danger', 'message_content' => $e->getMessage()));    exit;}