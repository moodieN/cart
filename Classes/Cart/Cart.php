<?php/** * Created by PhpStorm. * User: nicol * Date: 2019/09/21 * Time: 07:57 */namespace Classes\Cart;/** This class contains all functions for the parent class Cart */class Cart{    /** Create protected class variables */    private $items = [];    private $total = 0;    /** Declare Constructor for cart object */    function __construct($items=null){        /** Loop through items passed and add to cart object */        if($items){            /** Add item array to object instance */            $this->items = $items;            /** Calculate the current cart total for object instance */            self::updateCartTotal();        }    }    /** This function returns the current object total */    public function getTotal(){        /** Get updated cart total with current items */        self::updateCartTotal();        return $this->total;    }    /** Add an item to the cart */    public function addItem($name, $price, $quantity){        /** Loop through items and add to quantity if it exists, otherwise add the item */        $item_exists = false;        foreach($this->items as $key => $item){            /** Check if names on item matches */            if($item['name'] == $name){                $this->items[$key]['quantity'] = (int)$this->items[$key]['quantity'] + $quantity;                $item_exists = true;            }        }        /** Add item to cart if it does not exist */        if(!$item_exists){            array_push($this->items, array('name' => $name, 'price' => $price, 'quantity' => $quantity));        }        /** Update cart total */        self::updateCartTotal();    }    /** Get items in cart */    public function getItemList(){        return $this->items;    }    /** This is a private function used to update the current instance total */    private function updateCartTotal(){        /** reset cart total */        $this->total = 0;        /** Update cart total */        foreach($this->items as $item){            $this->total = $this->total + (number_format(round($item['price'], 2), 2) * $item['quantity']);        }    }}